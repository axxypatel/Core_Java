/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Order.*;
import Business.Organization.DoctorOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.ldap.HasControls;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.json.*;

/**
 *
 * @author Akshay
 */
public class PlaceOrderPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Patient patient;
    private OrderList orderListTemp;
    DateFormat dateFormat = new SimpleDateFormat("yyyy-dd-MM");
    DateFormat dayFormat = new SimpleDateFormat("EEEE");
    public ArrayList<Integer> totalDays = new ArrayList<Integer>();
    public HashMap<Integer, Integer> numbOfDays = new HashMap<Integer, Integer>();
    private InteractionsShowPanel tempPanel;
    private EcoSystem system;
    private Boolean interactionCheck;
    private Date currentDate;
    DateFormat dateFormatTemp = new SimpleDateFormat("yyyy-dd-MM HH:mm:ss");

    /**
     * Creates new form PlaceOrderPanel
     */
    public PlaceOrderPanel(JPanel userProcessContainer, UserAccount userAccount, DoctorOrganization organization, Enterprise enterprise, Patient patient, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.patient = patient;
        this.system = system;
        interactionCheck = Boolean.TRUE;
        orderListTemp = new OrderList();
        currentDate = new Date();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) drugDosejTable.getModel();
        dtm.setRowCount(0);
        for (Order orderTemp : orderListTemp.getOrderList()) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = orderTemp;
            row[1] = String.valueOf(orderTemp.getDrugObject().getStrength()) + orderTemp.getDrugObject().getStrengthUnit();
            row[2] = String.valueOf(orderTemp.getDrugObject().getVolume()) + orderTemp.getDrugObject().getVolumeUnit();
            row[3] = orderTemp.getDrugObject().getDispenseQty();
            row[4] = orderTemp.getDrugDose();
            row[5] = dateFormat.format(orderTemp.getStartDate());
            row[6] = dateFormat.format(orderTemp.getEndDate());
            dtm.addRow(row);
        }
    }
    
    public void setFlag(Boolean flg){
        interactionCheck = flg;
    }
    
    public Boolean searchDrug(int drugId){
        for(Order order: orderListTemp.getOrderList())
        {
            if(String.valueOf(order.getDrugObject().getDrugId()).equals(String.valueOf(drugId)))
            {
                return true;
            }
        }
        return false;
    }
    
    public void clearCheckBox(){
        morjCheckBox.setSelected(false);
        aftjCheckBox.setSelected(false);
        evejCheckBox.setSelected(false);
        sunjCheckBox.setSelected(false);
        monjCheckBox.setSelected(false);
        tueCheckBox.setSelected(false);
        wedjCheckBox.setSelected(false);
        thuCheckBox.setSelected(false);
        friCheckBox.setSelected(false);
        satjCheckBox.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        drugNameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        drugJTable = new javax.swing.JTable();
        searchDrugBtn = new javax.swing.JButton();
        addDrugDoseBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        drugDosejTable = new javax.swing.JTable();
        deleteOrderBtn = new javax.swing.JButton();
        drugInteractionCheckBtn = new javax.swing.JButton();
        placeOrderBtn = new javax.swing.JButton();
        placeorderBackBtn = new javax.swing.JButton();
        evejCheckBox = new javax.swing.JCheckBox();
        sunjCheckBox = new javax.swing.JCheckBox();
        tueCheckBox = new javax.swing.JCheckBox();
        monjCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        wedjCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        aftjCheckBox = new javax.swing.JCheckBox();
        morjCheckBox = new javax.swing.JCheckBox();
        friCheckBox = new javax.swing.JCheckBox();
        thuCheckBox = new javax.swing.JCheckBox();
        satjCheckBox = new javax.swing.JCheckBox();
        startjXDatePicker = new org.jdesktop.swingx.JXDatePicker();
        endjXDatePicker = new org.jdesktop.swingx.JXDatePicker();

        jLabel1.setText("Search Drug");

        jLabel2.setText("Drug Name:");

        drugJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "Strength", "Volume", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(drugJTable);

        searchDrugBtn.setText("Search");
        searchDrugBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDrugBtnActionPerformed(evt);
            }
        });

        addDrugDoseBtn.setText("Add Drug");
        addDrugDoseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDrugDoseBtnActionPerformed(evt);
            }
        });

        drugDosejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "Strength", "Volume", "Quantity", "Drug Dose", "Start Date", "End Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(drugDosejTable);

        deleteOrderBtn.setText("Delete Drug");
        deleteOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderBtnActionPerformed(evt);
            }
        });

        drugInteractionCheckBtn.setText("Check Drug Interactions");
        drugInteractionCheckBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drugInteractionCheckBtnActionPerformed(evt);
            }
        });

        placeOrderBtn.setText("Place Order");
        placeOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderBtnActionPerformed(evt);
            }
        });

        placeorderBackBtn.setText("<< Back");
        placeorderBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeorderBackBtnActionPerformed(evt);
            }
        });

        evejCheckBox.setText("Evening");

        sunjCheckBox.setText("Sunday");

        tueCheckBox.setText("Tuesday");

        monjCheckBox.setText("Monday");

        jLabel5.setText("Day:");

        wedjCheckBox.setText("Wednesday");

        jLabel6.setText("Start Time:");

        jLabel8.setText("DayTime:");

        jLabel9.setText("End Time:");

        aftjCheckBox.setText("Afternoon");

        morjCheckBox.setText("Morning");

        friCheckBox.setText("Friday");

        thuCheckBox.setText("Thursday");

        satjCheckBox.setText("Saturday");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteOrderBtn)
                                .addGap(263, 263, 263)
                                .addComponent(placeOrderBtn))
                            .addComponent(placeorderBackBtn)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(drugNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(searchDrugBtn))
                            .addComponent(jLabel1)
                            .addComponent(addDrugDoseBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(morjCheckBox)
                                    .addComponent(sunjCheckBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(aftjCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(evejCheckBox))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(monjCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tueCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(wedjCheckBox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(thuCheckBox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(friCheckBox)
                                                .addGap(18, 18, 18)
                                                .addComponent(satjCheckBox))
                                            .addComponent(endjXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(407, 407, 407))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(drugInteractionCheckBtn)
                                .addGap(218, 218, 218))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startjXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(drugNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchDrugBtn))
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(morjCheckBox)
                            .addComponent(evejCheckBox)
                            .addComponent(aftjCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(sunjCheckBox)
                            .addComponent(monjCheckBox)
                            .addComponent(tueCheckBox)
                            .addComponent(wedjCheckBox)
                            .addComponent(friCheckBox)
                            .addComponent(thuCheckBox)
                            .addComponent(satjCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startjXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endjXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)
                        .addComponent(addDrugDoseBtn))
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteOrderBtn)
                    .addComponent(drugInteractionCheckBtn)
                    .addComponent(placeOrderBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(placeorderBackBtn)
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchDrugBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDrugBtnActionPerformed
        // TODO add your handling code here:
        String drugName = drugNameTextField.getText();
        DefaultTableModel dtm = (DefaultTableModel) drugJTable.getModel();
        dtm.setRowCount(0);
        if (!"".equals(drugName)) {
            for (Drug drug : system.getDrugListObject().getDrugList()) {
                String drugTemp = drug.toString();
                if (drugTemp.toLowerCase().contains(drugName.toLowerCase())) {
                    Object[] row = new Object[dtm.getColumnCount()];
                    row[0] = drug;
                    row[1] = String.valueOf(drug.getStrength()) + drug.getStrengthUnit();
                    row[2] = String.valueOf(drug.getVolume()) + drug.getVolumeUnit();
                    row[3] = drug.getDispenseQty();
                    dtm.addRow(row);
                }
            }
            drugNameTextField.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Please enter drug name correctly.");
        }
    }//GEN-LAST:event_searchDrugBtnActionPerformed

    private void addDrugDoseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDrugDoseBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = drugJTable.getSelectedRow();
        int drugDose;
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select drug from the table.");
            return;
        }
        try {
            Drug drug = (Drug) drugJTable.getValueAt(selectedRow, 0);        
                        
            if ((!morjCheckBox.isSelected() && !aftjCheckBox.isSelected() && !evejCheckBox.isSelected()) || (!sunjCheckBox.isSelected()
                    && !monjCheckBox.isSelected() && !tueCheckBox.isSelected() && !wedjCheckBox.isSelected() && !thuCheckBox.isSelected()
                    && !friCheckBox.isSelected() && !satjCheckBox.isSelected())
                    || ((dateFormat.format(startjXDatePicker.getDate()).isEmpty()) && (dateFormat.format(endjXDatePicker.getDate()).isEmpty()))) {
                JOptionPane.showMessageDialog(null, "Please enter proper schedule meeting.");
                return;
            }
            int daytime = 0;
            int weekdays = 0;
            int weekday = 0;
            int monthdays = 0;

            if (selectedRow >= 0) {
                Date startDate = startjXDatePicker.getDate();
                Date endDate = endjXDatePicker.getDate();
                
                String sample1 = dateFormat.format(currentDate)+" 00:00:00";
                //String sample2 = dateFormat.format(endDate)+" 00:00:00";
                currentDate = dateFormatTemp.parse(sample1);
                //endDate = dateFormatTemp.parse(sample2);
                if(currentDate.after(startDate)){
                    JOptionPane.showMessageDialog(null, "Please select start date correctly");
                    return;
                }
                
                if(endDate.before(startDate)){
                    JOptionPane.showMessageDialog(null, "Please select end date correctly");
                    return;
                }
                
                if(searchDrug(drug.getDrugId()))
                {
                    JOptionPane.showMessageDialog(null, "Drug is already added.");
                    return;
                }             
                
                long diff = endDate.getTime() - startDate.getTime();
                monthdays = (int) (diff / (1000 * 60 * 60 * 24)) + 1;
                if (monthdays < 0) {
                    JOptionPane.showMessageDialog(null, "Please enter proper start date and enddate.");
                    return;
                }

                Order order = orderListTemp.addOrder();
                order.setDrugObject(drug);
                // get the number of days available bewteen start date and end date.
                String abc = dayFormat.format(startDate).toLowerCase();
                //System.out.println(monthdays);
                for (int i = 1; i <= monthdays; i++) {
                    if (i == 1) {
                        if (abc.contains("sunday")) {
                            weekday = 1;
                        } else if (abc.contains("monday")) {
                            weekday = 2;
                        } else if (abc.contains("tuesday")) {
                            weekday = 3;
                        } else if (abc.contains("wednesday")) {
                            weekday = 4;
                        } else if (abc.contains("thursday")) {
                            weekday = 5;
                        } else if (abc.contains("friday")) {
                            weekday = 6;
                        } else if (abc.contains("saturday")) {
                            weekday = 7;
                        }
                    }
                    totalDays.add(weekday);
                    if (weekday == 7) {
                        weekday = 1;
                    } else {
                        weekday += 1;
                    }

                }
                //System.out.println(totalDays);
                for (int j : totalDays) {
                    if (!numbOfDays.containsKey(j)) {
                        numbOfDays.put(j, 1);
                    } else {
                        int temp = numbOfDays.get(j) + 1;
                        numbOfDays.put(j, temp);
                    }
                }
                //System.out.println(numbOfDays);
                if (morjCheckBox.isSelected()) {
                    daytime += 1;
                    order.getDayTimeList().add(1);
                }
                if (aftjCheckBox.isSelected()) {
                    daytime += 1;
                    order.getDayTimeList().add(2);
                }
                if (evejCheckBox.isSelected()) {
                    daytime += 1;
                    order.getDayTimeList().add(3);
                }

                //System.out.println(numbOfDays);
//                for (int x : numbOfDays.keySet()) {
//                    if (x == 1) {
//                        weekdays += numbOfDays.get(1);
//                        order.getDayList().add("sunday");
//                    }
//                    if (x == 2) {
//                        weekdays += numbOfDays.get(2);
//                        order.getDayList().add("monday");
//                    }
//                    if (x == 3) {
//                        weekdays += numbOfDays.get(3);
//                        order.getDayList().add("tuesday");
//                    }
//                    if (x == 4) {
//                        weekdays += numbOfDays.get(4);
//                        order.getDayList().add("wednesday");
//                    }
//                    if (x == 5) {
//                        weekdays += numbOfDays.get(5);
//                        order.getDayList().add("thursday");
//                    }
//                    if (x == 6) {
//                        weekdays += numbOfDays.get(6);
//                        order.getDayList().add("friday");
//                    }
//                    if (x == 7) {
//                        weekdays += numbOfDays.get(7);
//                        order.getDayList().add("saturday");
//                    }
//
//                }
                if(sunjCheckBox.isSelected()){
                    weekdays += numbOfDays.get(1);
                    order.getDayList().add("sunday");
                }
                if(monjCheckBox.isSelected()){
                    weekdays += numbOfDays.get(2);
                    order.getDayList().add("monday");
                }
                if(tueCheckBox.isSelected()){
                    weekdays += numbOfDays.get(3);
                    order.getDayList().add("tuesday");
                }
                if(wedjCheckBox.isSelected()){
                    weekdays += numbOfDays.get(4);
                    order.getDayList().add("wednesday");
                }
                if(thuCheckBox.isSelected()){
                    weekdays += numbOfDays.get(5);
                    order.getDayList().add("thursday");
                }
                if(friCheckBox.isSelected()){
                    weekdays += numbOfDays.get(6);
                    order.getDayList().add("friday");
                }
                if (friCheckBox.isSelected()) {
                    weekdays += numbOfDays.get(7);
                    order.getDayList().add("saturday");
                }

                //System.out.println(weekdays);
                //System.out.println(dayFormat.format(startDate));
                //JOptionPane.showMessageDialog(null, monthdays);
                //System.out.println(weekdays * daytime);
                order.setDrugDose(weekdays * daytime);
                order.setStartDate(startDate);
                order.setEndDate(endDate);
                order.setOrderTimeStamp(new Date());
                JOptionPane.showMessageDialog(null, "Drug added successfull");
                numbOfDays.clear();
                totalDays.clear();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid drug.");
            return;
        } catch (java.text.ParseException ex) {
            JOptionPane.showMessageDialog(null, "Please enter proper start date and end date.");
            return;
        }catch(ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null, "Please select the drug from table.");
            return;
        }
        
        clearCheckBox();
        populateTable();
    }//GEN-LAST:event_addDrugDoseBtnActionPerformed

    private void deleteOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = drugDosejTable.getSelectedRow();
        Order order = (Order) drugDosejTable.getValueAt(selectedRow, 0);

        orderListTemp.deleteOrder(order);
        populateTable();

    }//GEN-LAST:event_deleteOrderBtnActionPerformed

    private void drugInteractionCheckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugInteractionCheckBtnActionPerformed
        // TODO add your handling code here:
        String interStr = "";
        for (Order order : orderListTemp.getOrderList()) {
            interStr += "+" + order.getDrugObject().getDrugId();
        }
        try
        {
            interStr = interStr.substring(1);
        }catch(StringIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null, "No order hase been selected.");
            return;
        }
        
        String url = "https://rxnav.nlm.nih.gov/REST/interaction/list.json?rxcuis="+interStr;
        //String url = "https://rxnav.nlm.nih.gov/REST/interaction/list.json?rxcuis=123+345";
        String finalInteractions = "";

        URL obj;
        try {
            obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");

            int responseCode = con.getResponseCode();

            System.out.println(responseCode);
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            //print result
            //System.out.println(response.toString());
            Object jobj = new JSONParser().parse(response.toString());

            JSONObject jo = (JSONObject) jobj;
            //JSONObject job = (JSONObject) jo.get("nlmDisclaimer");
            JSONArray address = (JSONArray) jo.get("fullInteractionTypeGroup");

            for (Object o : address) {
                JSONObject objt = (JSONObject) o;
                String strTemp = (String) objt.get("sourceDisclaimer");
                //System.out.println(strTemp);
                JSONArray add2 = (JSONArray) objt.get("fullInteractionType");
                for (Object obj2 : add2) {
                    JSONObject objTemp = (JSONObject) obj2;
                    String strTemp2 = (String) objTemp.get("comment");
                    finalInteractions = finalInteractions + "~" + strTemp2;
                    //System.out.println(strTemp2);
                    JSONArray add3 = (JSONArray) objTemp.get("interactionPair");
                    for (Object obj3 : add3) {
                        JSONObject objTemp3 = (JSONObject) obj3;
                        String strTemp3 = (String) objTemp3.get("description");
                        finalInteractions = finalInteractions + "~" + strTemp3;
                        if (!strTemp3.isEmpty()) {
                            break;
                        }
                        //System.out.println(strTemp3);
                    }
                }
            }
        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(null, "Please enter proper drug ID");
            return;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Connection Time-Out");
            return;
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "API Output is not proper.");
            return;
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "API did not give any interactions.");
        }
        if (finalInteractions.isEmpty()) {
            interactionCheck = Boolean.FALSE;
        }
        else
        {
            interactionCheck = Boolean.TRUE;
            int cnt = patient.getInteractionCount();
            patient.setInteractionCount(cnt+1);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("InteractionsShowPanel", new InteractionsShowPanel(userProcessContainer, finalInteractions, patient));
            cardLayout.next(userProcessContainer);
        }
    }//GEN-LAST:event_drugInteractionCheckBtnActionPerformed

    private void placeOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderBtnActionPerformed
        // TODO add your handling code here:
        if (!interactionCheck) {
            for (Order orderTemp:orderListTemp.getOrderList())
            {
                Order order = patient.getOrderList().addOrder();
                order.setDrugDose(orderTemp.getDrugDose());
                order.setDayList(orderTemp.getDayList());
                order.setDayTimeList(orderTemp.getDayTimeList());
                order.setDrugObject(orderTemp.getDrugObject());
                order.setStartDate(orderTemp.getStartDate());
                order.setEndDate(orderTemp.getEndDate());
                order.setOrderTimeStamp(orderTemp.getOrderTimeStamp());
            }
            JOptionPane.showMessageDialog(null, "Patient order hase been placed");
            //DefaultTableModel dtm = (DefaultTableModel) drugDosejTable.getModel();
            //dtm.setRowCount(0);
        } else {
            JOptionPane.showMessageDialog(null, "Please click on interaction check button to see more detail.");
        }
    }//GEN-LAST:event_placeOrderBtnActionPerformed

    private void placeorderBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeorderBackBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        PatientDetailsJPanel pdjp = (PatientDetailsJPanel) component;
        pdjp.populateLabOrders();
        pdjp.populateOrders();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_placeorderBackBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDrugDoseBtn;
    private javax.swing.JCheckBox aftjCheckBox;
    private javax.swing.JButton deleteOrderBtn;
    private javax.swing.JTable drugDosejTable;
    private javax.swing.JButton drugInteractionCheckBtn;
    private javax.swing.JTable drugJTable;
    private javax.swing.JTextField drugNameTextField;
    private org.jdesktop.swingx.JXDatePicker endjXDatePicker;
    private javax.swing.JCheckBox evejCheckBox;
    private javax.swing.JCheckBox friCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox monjCheckBox;
    private javax.swing.JCheckBox morjCheckBox;
    private javax.swing.JButton placeOrderBtn;
    private javax.swing.JButton placeorderBackBtn;
    private javax.swing.JCheckBox satjCheckBox;
    private javax.swing.JButton searchDrugBtn;
    private org.jdesktop.swingx.JXDatePicker startjXDatePicker;
    private javax.swing.JCheckBox sunjCheckBox;
    private javax.swing.JCheckBox thuCheckBox;
    private javax.swing.JCheckBox tueCheckBox;
    private javax.swing.JCheckBox wedjCheckBox;
    // End of variables declaration//GEN-END:variables
}
