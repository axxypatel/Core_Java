/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ReceptionistRole;

import Business.Order.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.ReceptionOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.LabAssistantRole.LabAssistantWorkAreaJPanel;

/**
 *
 * @author Akshay
 */
public class ReceptionistWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private ReceptionOrganization receptionOrganization;
    private EcoSystem system;
    private Patient patient;
            
    
    /**
     * Creates new form ReceptionistWorkAreaJPanel
     */
    
    public ReceptionistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem system, Patient patient) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.system = system;
        this.patient = patient;
        this.receptionOrganization = (ReceptionOrganization)organization;
        if(patient != null){
            fillPatientValues();
        }
    }
    public void fillPatientValues(){
        String[] name = patient.getPatientName().split(" ");
        mrnTextField.setText(String.valueOf(patient.getMRN()));
        FirstNameTextField.setText(name[0]);
        LastNameTextField.setText(name[0]);
        EmailTextField.setText(patient.getPatientEmail());
        AddressTextField.setText(patient.getPatientAddress());
        locationjTextField.setText(patient.getPatientLocation());
        AgeTextField.setText(String.valueOf(patient.getAge()));
        NumberTextField.setText(patient.getPatientNumber());
        SexComboBox.setSelectedItem(patient.getPatientSex());
                                
    }
    public Boolean searchMRN(Long mrn)
    {
        for(Patient patient : system.getPatientList().getPatientList()){
            if(String.valueOf(patient.getMRN()).equals(String.valueOf(mrn))){
                return true;
            }
        }        
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        FirstNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        LastNameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        AddressTextField = new javax.swing.JTextField();
        NumberTextField = new javax.swing.JTextField();
        AgeTextField = new javax.swing.JTextField();
        patientSubmit = new javax.swing.JButton();
        EmailTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        SexComboBox = new javax.swing.JComboBox<>();
        receptionBackButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblAddEditHRC = new javax.swing.JLabel();
        locationjTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        mrnTextField = new javax.swing.JTextField();

        jLabel1.setText("Patient FirstName:*");

        jLabel2.setText("Patient LastName:*");

        jLabel3.setText("Patient Address:");

        jLabel4.setText("Patient Location:*");

        jLabel5.setText("Patient Number:*");

        jLabel6.setText("Patient Age:*");

        jLabel7.setText("Patient Sex:*");

        patientSubmit.setText("Save");
        patientSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientSubmitActionPerformed(evt);
            }
        });

        jLabel8.setText("Patient Email:");

        SexComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Male", "Female" }));

        receptionBackButton.setText("<< Back");
        receptionBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receptionBackButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Patient Detail");

        lblAddEditHRC.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblAddEditHRC.setText("Create/Edit Patient");

        jLabel10.setText("Patient MRN:*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(306, 306, 306)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)))))
                    .addComponent(jLabel10))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FirstNameTextField)
                    .addComponent(LastNameTextField)
                    .addComponent(AddressTextField)
                    .addComponent(NumberTextField)
                    .addComponent(AgeTextField)
                    .addComponent(EmailTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 106, Short.MAX_VALUE))
                    .addComponent(locationjTextField)
                    .addComponent(mrnTextField))
                .addGap(357, 357, 357))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(415, 415, 415)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(receptionBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(404, 404, 404)
                        .addComponent(lblAddEditHRC))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(patientSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddEditHRC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(mrnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(LastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(locationjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(NumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(AgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(SexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(patientSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(receptionBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void patientSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSubmitActionPerformed
        // TODO add your handling code here:
       
        // Email validation for patient
        if(! EmailTextField.getText().isEmpty())
           {
               String regex_user = "^[A-Za-z0-9]+([_A-Za-z0-9]+)*@"
                + "[_A-Za-z0-9]+(\\.[_A-Za-z0-9]+)*(\\.[_A-Za-z]{2,})$";
                Pattern pattern = Pattern.compile(regex_user);
                Matcher matcher = pattern.matcher(EmailTextField.getText());
                if (!matcher.matches()) {
                     JOptionPane.showMessageDialog(null, "Please enter email id in correct format. Only special characters allowed _ and &. Also cannot start with _");
                     EmailTextField.setText("");
                     return;
                }
                
           }
        String abc = SexComboBox.getSelectedItem().toString();
       // Patient detail validation for empty values       
       if(! mrnTextField.getText().isEmpty() && ! FirstNameTextField.getText().isEmpty() && ! LastNameTextField.getText().isEmpty() && ! locationjTextField.getText().isEmpty()
               && ! AgeTextField.getText().isEmpty() && ! NumberTextField.getText().isEmpty() && ! "".equals(SexComboBox.getSelectedItem().toString().trim()))
       {
           
           try
           {
                long mrn = Long.parseLong(mrnTextField.getText());
                Boolean mrnCheck = searchMRN(mrn);
                if(mrnCheck){
                    JOptionPane.showMessageDialog(null, "MRN number is already exist in the system.");
                    mrnTextField.setText("");
                    return;
                }
           }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Please numeric value of MRN.");
                mrnTextField.setText("");
                return;
           }
           
           //mobile number validation
           if(NumberTextField.getText().length()!=10){
               JOptionPane.showMessageDialog(null, "Please enter correct number. Number should be of 10 length.");
               NumberTextField.setText("");
               return;
           }
           
           // Mobile Number validation for patient
            if(! NumberTextField.getText().isEmpty())
           {
               String regex_user = "^[1-9]+[0-9]+";
               Pattern pattern = Pattern.compile(regex_user);
               Matcher matcher = pattern.matcher(NumberTextField.getText());
               if (!matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please enter mobile number as numeric only.");
                    NumberTextField.setText("");
                    return;
                }
                
           }
            
           //firstname numeric validation
            if(! FirstNameTextField.getText().isEmpty())
           {
               String regex_user = "[A-Za-z]+";
               Pattern pattern = Pattern.compile(regex_user);
               Matcher matcher = pattern.matcher(FirstNameTextField.getText());
               if (!matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please enter first name as character only.");
                    FirstNameTextField.setText("");
                    return;
                }
                
           }
           
            //lastname numeric validation
            if(! LastNameTextField.getText().isEmpty())
           {
               String regex_user = "[A-Za-z]+";
               Pattern pattern = Pattern.compile(regex_user);
               Matcher matcher = pattern.matcher(LastNameTextField.getText());
               if (!matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please enter last name as character only.");
                    LastNameTextField.setText("");
                    return;
                }
                
           }          
                
           
           try
           {
                int age = Integer.parseInt(AgeTextField.getText());
                if( age < 0){
                    JOptionPane.showMessageDialog(null, "Please enter correct Age of the patient.");
                    AgeTextField.setText("");
                    return;
                }
           }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Please numeric value of age.");
                AgeTextField.setText("");
                return;
           }
           
           if(patient== null){
                Patient patientTemp = system.getPatientList().addPatient();
                patientTemp.setMRN(Long.parseLong(mrnTextField.getText()));
                patientTemp.setPatientName(FirstNameTextField.getText() + " "+ LastNameTextField.getText());
                patientTemp.setPatientEmail(EmailTextField.getText());
                patientTemp.setPatientLocation(locationjTextField.getText());
                patientTemp.setAge(Integer.parseInt(AgeTextField.getText()));
                patientTemp.setPatientAddress(AddressTextField.getText());
                patientTemp.setPatientNumber(NumberTextField.getText());
                patientTemp.setPatientSex(SexComboBox.getSelectedItem().toString());      
                JOptionPane.showMessageDialog(null, "Patient added successfully");               
           }else{
                
                patient.setMRN(Long.parseLong(mrnTextField.getText()));
                patient.setPatientName(FirstNameTextField.getText() + " "+ LastNameTextField.getText());
                patient.setPatientEmail(EmailTextField.getText());
                patient.setPatientLocation(locationjTextField.getText());
                patient.setAge(Integer.parseInt(AgeTextField.getText()));
                patient.setPatientAddress(AddressTextField.getText());
                patient.setPatientNumber(NumberTextField.getText());
                patient.setPatientSex(SexComboBox.getSelectedItem().toString());      
                JOptionPane.showMessageDialog(null, "Patient updated successfully");    
           }
                        
            mrnTextField.setText("");
            FirstNameTextField.setText("");
            LastNameTextField.setText("");
            EmailTextField.setText("");
            AgeTextField.setText("");
            locationjTextField.setText("");
            AddressTextField.setText("");
            NumberTextField.setText("");
            
       }    
       else
           JOptionPane.showMessageDialog(null, "Please enter all required detail of patient.");
    }//GEN-LAST:event_patientSubmitActionPerformed

    private void receptionBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptionBackButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ReceptionPanel dwjp = (ReceptionPanel) component;
        dwjp.clear();
        CardLayout cardLayout = (CardLayout)userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_receptionBackButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressTextField;
    private javax.swing.JTextField AgeTextField;
    private javax.swing.JTextField EmailTextField;
    private javax.swing.JTextField FirstNameTextField;
    private javax.swing.JTextField LastNameTextField;
    private javax.swing.JTextField NumberTextField;
    private javax.swing.JComboBox<String> SexComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblAddEditHRC;
    private javax.swing.JTextField locationjTextField;
    private javax.swing.JTextField mrnTextField;
    private javax.swing.JButton patientSubmit;
    private javax.swing.JButton receptionBackButton;
    // End of variables declaration//GEN-END:variables
}
